Maitri Mangal
CS471 Assignment 2

--------------------------------------------------------------------------------------------
#1
--------------------------------------------------------------------------------------------
Grammar in BNF form:

<command> := <expr>
<expr> := <term> + <expr> | <term>
<term> := <factor> * <term> | <factor>
<factor> := (<expr>) | <number>
<number> := <digit><number> | <digit>
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9


Recursive:
This code is right recursive.  This means that the expression will be evaluated from right to left.
The precedence will still remain where multiplication is higher than addition.

--------------------------------------------------------------------------------------------
#2
--------------------------------------------------------------------------------------------
Modified Grammar:

<command> := <plus>
<plus> := <minus> + <plus> | <minus>
<minus> := <mult> - <minus> | <mult>
<mult> := <avg> * <mult> | <avg>
<avg> := <factor> @ <avg> | <factor>
<factor> := (<plus>) | <number>
<number> := <digit><number> | <digit>
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

--------------------------------------------------------------------------------------------
#3
--------------------------------------------------------------------------------------------
Left Derivations:

a) 1 + 2 - 2

command --> plus --> minus + plus --> mult + plus --> avg + plus --> factor + plus --> number + plus
--> digit + plus --> 1 + plus --> 1 + minus --> 1 + mult - minus --> 1 + avg - minus --> 1 + factor - minus
--> 1 + number - minus --> 1 + digit - minus --> 1 + 2 - minus --> 1 + 2 - mult --> 1 + 2 - avg --> 1 + 2 - factor
--> 1 + 2 - number --> 1 + 2 - digit --> 1 + 2 - 2

b) 2 - 3 * 5

command --> plus --> minus --> mult - minus --> avg - minus --> factor - minus --> number - minus --> 2 - minus
--> 2 - mult --> 2 - avg * mult --> 2 - factor * mult --> 2 - number * mult --> 2 - 3 * mult --> 2 - 3 * avg
--> 2 - 3 * factor --> 2 - 3 * number --> 2 - 3 * 5

c) 10 - 5 @ 2 

command --> plus --> minus --> mult - minus --> avg - minus --> factor - minus --> number - minus --> digitnumber - minus
--> 1number - minus --> 1digit - minus --> 10 - minus --> 10 - mult --> 10 - avg --> 10 - factor @ avg --> 10 - number @ avg
10 - 5 @ avg --> 10 - 5 @ factor --> 10 - 5 @ number --> 10 - 5 @ 2

d) 10 - 7 - 2

command --> plus --> minus --> mult - minus --> avg - minus --> factor - minus --> number - minus --> digitnumber - minus
--> 1number - minus --> 1digit - minus --> 10 - minus --> 10 - mult - minus --> 10 - avg - minus --> 10 - factor - minus
--> 10 - number - minus --> 10 - 7 - minus --> 10 - 7 - mult --> 10 - 7 - avg --> 10 - 7 - factor --> 10 - 7 - number
--> 10 - 7 - 2


--------------------------------------------------------------------------------------------
#4
--------------------------------------------------------------------------------------------

Modified code has been added to the src file under the name q4.c
If you want to run this code, just type in the command line 'make q4' and then run using ./q4

--------------------------------------------------------------------------------------------
#5
--------------------------------------------------------------------------------------------
Grammar in BNF form:

<command> := <expr>
<expr> := <expr> + <term> | <term>
<term> := <term> * <factor> | <factor>
<factor> := (<expr>) | <number>
<number> := <digit><number> | <digit>
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9


Recursive:
This code is left recursive.  This means that the expression will be evaluated from left to right.
The precedence will still remain where multiplication is higher than addition.

--------------------------------------------------------------------------------------------
#6
--------------------------------------------------------------------------------------------
Modified Grammar:

<command> := <plus>
<plus> := <plus> + <minus> | <minus>
<minus> := <minus> - <mult> | <mult>
<mult> := <mult> * <avg> | <avg>
<avg> := <avg> @ <factor> | <factor>
<factor> := (<plus>) | <number>
<number> := <digit><number> | <digit>
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

--------------------------------------------------------------------------------------------
#7
--------------------------------------------------------------------------------------------
Left Derivations:

a) 1 + 2 - 2

command --> plus --> plus + minus --> minus + minus --> mult + minus --> avg + minus --> factor + minus --> number + minus
--> digit + minus --> 1 + minus --> 1 + minus - mult --> 1 + mult - mult --> 1 + avg - minus --> 1 + factor - mult
--> 1 + number - mult --> 1 + digit - mult --> 1 + 2 - mult --> 1 + 2 - avg --> 1 + 2 - factor
--> 1 + 2 - number --> 1 + 2 - digit --> 1 + 2 - 2

b) 2 - 3 * 5

command --> plus --> minus --> minus - mult --> mult - mult --> avg - mult --> factor - mult --> number - mult
--> digit - mult --> 2 - mult --> 2 - mult * avg --> 2 - avg * avg --> 2 - factor * avg
--> 2 - number * avg --> 2 - 3 * avg --> 2 - 3 * factor --> 2 - 3 * number --> 2 - 3 * 5


c) 10 - 5 @ 2 

command --> plus --> minus --> minus - mult --> mult - mult --> avg - mult --> factor - mult --> number - mult --> digitnumber - mult
--> 1number - mult --> 1digit - mult --> 10 - mult --> 10 - avg --> 10 - avg @ factor --> 10 - factor @ factor --> 10 - number @ factor
10 - 5 @ factor --> 10 - 5 @ number --> 10 - 5 @ 2

d) 10 - 7 - 2

command --> plus --> minus --> minus - mult --> mult - mult --> avg - mult --> factor - mult --> number - mult --> digitnumber - mult
--> 1number - mult --> 1digit - mult --> 10 - mult --> 10 - minus - mult --> 10 - mult - mult --> 10 - avg - mult --> 10 - factor - mult
--> 10 - number - mult --> 10 - 7 - mult --> 10 - 7 - avg --> 10 - 7 - factor --> 10 - 7 - number --> 10 - 7 - 2


--------------------------------------------------------------------------------------------
#8
--------------------------------------------------------------------------------------------

Modified code has been added to the src file under the name q8.c
If you want to run this code, just type in the command line 'make q8' and then run using ./q8

--------------------------------------------------------------------------------------------
#9
--------------------------------------------------------------------------------------------
(1) C identifiers: A C identifier must start with an alpha character or an underscore, and may be followed by alphanumeric characters or the underscore.

^[_a-zA-z]\w*$

(2) Strings: A string must start and end with an double quote and may contain any character except the double quote itself; however, you may escape a double quote inside the string using \ -- i.e. "this is \" a string"

^"([^\\"]|\\.)*"$

(3) Strings over the alphabet {a,b} that contain an even number of b's. 

^(a|a*ba*b)*$

(4) Strings over the alphabet {a,b,c} that contain an odd number of c's.

^[ab]*c[ab]*(c[ab]*c[ab]*)*$

--------------------------------------------------------------------------------------------
#10
--------------------------------------------------------------------------------------------

a) They are both used to describe the same thing.  They are describing the boolean value whether the expression is true(1) or false(0).

b) _Bool was a defined keyword in the language starting with C99 standard.  _Bool will hold either 0 or 1.  However, bool wasnt a reserved word in C prior to C99.  
Hence, they used _Bool as their reserved keyword.  However, after they added bool as a macro in the stdbool.h library.  Hence, bool will be an alias to _Bool and expand to _Bool.

c) Syntactically they both offer the same thing.  However, when working with C, you will need to include the stdbool.h library to be able to use the bool keyword.  For forward
compatibilty with C++, using bool will be more useful as it is already a defined key word in that language.  But, if youre just using C, then _Bool will be better
as it is already a defined keyword in C, and the compiler will recognize it over bool.

--------------------------------------------------------------------------------------------
#11
--------------------------------------------------------------------------------------------

Pragmas as defined by the book just means that it provides a means to a construct that provides directives or hints to the compiler.

Pragmas that appear as significant comments which dont influence the execution or semantics process, but rather hte compilation process are processed by the scanner. 
Pragmas are processed by the scanner because they are allowed to appear anywhere in the source code.  If they were to be processed by the parser, then it would complicate
the parser a lot.

Pros:
Can improve readability in the code
Can help improve execution time of code

Cons:
Can restrict certain behaviors in code
Can cause too much complexity in the scanner or parser or semantic analyzer

--------------------------------------------------------------------------------------------
#12
--------------------------------------------------------------------------------------------

a) w + x ^ y ^ z
  (w+((x^y)^z))
  (+w(^(^xy)z))
   +w^^xyz

b) w + x + y / z
  ((w+x)+(y/z))
  (+(+wx)(/yz))
   ++wx/yz

c) w * x * y ^ z
  ((w*x)*(y^z))
  (*(*wx)(^yz))
   **wx^yz

d) w / x * y / z
  (((w/x)*y)/z)
  (/(*(/wx)y)z)
   /*/wxyz


--------------------------------------------------------------------------------------------
#13
--------------------------------------------------------------------------------------------

a) w + x ^ y ^ z
  (w+((x^y)^z))
  (w((xy^)z^)+)
  wxy^z^+

b) w + x + y / z
  ((w+x)+(y/z))
  ((wx+)(yz/)+)
   wx+yz/+

c) w * x * y ^ z
  ((w*x)*(y^z))
  ((wx*)(yz^)*)
   wx*yz^* 

d) w / x * y / z
  (((w/x)*y)/z)
  (((wx/)y*)z/)
   wx/y*z/ 

